{"id":"app/models/Store.model.js","dependencies":[{"name":"C:\\Users\\Rodrigo\\Documents\\GitHub\\Propped-Node-API\\package.json","includedInParent":true,"mtime":1601776173274},{"name":"./db.js","loc":{"line":1,"column":20},"parent":"C:\\Users\\Rodrigo\\Documents\\GitHub\\Propped-Node-API\\app\\models\\Store.model.js","resolved":"C:\\Users\\Rodrigo\\Documents\\GitHub\\Propped-Node-API\\app\\models\\db.js"}],"generated":{"js":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst sql = require(\"./db.js\");\n\nconst Store = function (store) {\n  this.code_store = store.code_store;\n  this.name_store = store.name_store;\n  this.registry_store = store.registry_store;\n  this.website_store = store.website_store;\n  this.phone_store = store.phone_store;\n  this.postal_code_store = store.postal_code_store;\n  this.address_store = store.address_store;\n  this.city_store = store.city_store;\n  this.state_store = store.state_store;\n  this.country_store = store.country_store;\n  this.image_store = store.image_store;\n};\n\nStore.create = (newStore, result) => {\n  sql.query(`INSERT INTO Store_Propped VALUES('${newStore.code_store}','${newStore.name_store}','${newStore.registry_store}','${newStore.website_store}','${newStore.phone_store}','${newStore.postal_code_store}','${newStore.address_store}','${newStore.city_store}','${newStore.state_store}', '${newStore.country_store}', '${newStore.image_store}')`, (err, res) => {\n    if (err) {\n      result(err, null);\n      return;\n    }\n\n    result(null, _objectSpread({}, newStore));\n  });\n};\n\nStore.findByCode = (code, result) => {\n  sql.query(`SELECT * FROM Store_Propped WHERE code_store = '${code}'`, (err, res) => {\n    if (err) {\n      result(err, null);\n      return;\n    }\n\n    if (res.length > 0) {\n      result(null, res);\n      return;\n    }\n\n    result({\n      kind: \"not_found\"\n    }, null);\n    return -1;\n  });\n};\n\nStore.getAll = result => {\n  sql.query(\"SELECT * FROM Store_Propped\", (err, res) => {\n    if (err) {\n      result(null, err);\n      return;\n    }\n\n    result(null, res);\n  });\n};\n\nStore.updateByCode = (code, store, result) => {\n  store.code_store = code;\n  sql.query(`UPDATE Store_Propped SET name_store = '${store.name_store}', registry_store = '${store.registry_store}', website_store = '${store.website_store}', phone_store= '${store.phone_store}', postal_code_store= '${store.postal_code_store}', address_store= '${store.address_store}', city_store= '${store.city_store}', state_store= '${store.state_store}', country_store= '${store.country_store}', image_store = CAST('${store.image_store}' as varbinary(max))  WHERE code_store = '${code}'`, (err, res) => {\n    if (err) {\n      console.log(\"error: \", err);\n      result(null, err);\n      return;\n    }\n\n    if (res.affectedRows == 0) {\n      result({\n        kind: \"not_found\"\n      }, null);\n      return;\n    }\n\n    result(null, _objectSpread({\n      code_store: code\n    }, store));\n  });\n};\n\nStore.remove = (code, result) => {\n  sql.query(\"DELETE FROM Store_Propped WHERE code_store = '\" + code + \"'\", (err, res) => {\n    if (err) {\n      console.log(\"error: \", err);\n      result(null, err);\n      return;\n    }\n\n    if (res.affectedRows == 0) {\n      result({\n        kind: \"not_found\"\n      }, null);\n      return;\n    }\n\n    console.log(\"Store with code: \", code, \" was deleted\");\n    result(null, res);\n  });\n};\n\nmodule.exports = Store;"},"sourceMaps":null,"error":null,"hash":"f2e8bdf52001f68173ec77ed0866725a","cacheData":{"env":{}}}