{"id":"app/controllers/Favorites.controller.js","dependencies":[{"name":"C:\\Users\\Rodrigo\\Documents\\GitHub\\Propped-Node-API\\package.json","includedInParent":true,"mtime":1601776173274},{"name":"../data/Hasher.js","loc":{"line":1,"column":23},"parent":"C:\\Users\\Rodrigo\\Documents\\GitHub\\Propped-Node-API\\app\\controllers\\Favorites.controller.js","resolved":"C:\\Users\\Rodrigo\\Documents\\GitHub\\Propped-Node-API\\app\\data\\Hasher.js"},{"name":"../models/Favorite.model.js","loc":{"line":3,"column":25},"parent":"C:\\Users\\Rodrigo\\Documents\\GitHub\\Propped-Node-API\\app\\controllers\\Favorites.controller.js","resolved":"C:\\Users\\Rodrigo\\Documents\\GitHub\\Propped-Node-API\\app\\models\\Favorite.model.js"}],"generated":{"js":"const Hasher = require(\"../data/Hasher.js\");\n\nconst Favorite = require(\"../models/Favorite.model.js\");\n\nexports.create = (req, res) => {\n  if (!req.body) {\n    res.status(400).send({\n      message: \"Empty params\"\n    });\n  }\n\n  const favorite = new Favorite({\n    code_favorite: req.body.code_favorite,\n    id_user_favorite: req.body.id_user_favorite,\n    id_product_favorite: req.body.id_product_favorite\n  });\n  Favorite.create(favorite, (err, data) => {\n    do favorite.code_favorite = Hasher.generateCode(); while (Favorite.findByCode(favorite.code_favorite, (err, data) => {}) == -1);\n\n    if (err) res.status(500).send({\n      message: err.message || \"Error while trying to create favorite.\"\n    });else res.send(data.recordset);\n  });\n};\n\nexports.findAll = (req, res) => {\n  Favorite.getAll((err, data) => {\n    if (err) res.status(500).send({\n      message: err.message || \"Error while searching for favorites.\"\n    });else res.send(data.recordset);\n  });\n};\n\nexports.findOne = (req, res) => {\n  Favorite.findByCode(req.params.code_favorite, (err, data) => {\n    if (err) {\n      if (err.kind === \"not_found\") {\n        res.status(404).send({\n          message: `Favorite with the code ${req.params.code_favorite} wasn't found.`\n        });\n      } else {\n        res.status(500).send({\n          message: \"Error while searching for favorite with the code \" + req.params.code_favorite\n        });\n      }\n    } else res.send(data.recordset);\n  });\n};\n\nexports.update = (req, res) => {\n  if (!req.body) {\n    res.status(400).send({\n      message: \"Body of request can not be empty.\"\n    });\n  }\n\n  Favorite.updateByCode(req.params.code_favorite, new Favorite(req.body), (err, data) => {\n    if (err) {\n      if (err.kind === \"not_found\") {\n        res.status(404).send({\n          message: `Favorite with the code ${req.params.code_favorite} wasn't found.`\n        });\n      } else {\n        res.status(500).send({\n          message: \"Error when trying to update favorite with the following code: \" + req.params.code_favorite\n        });\n      }\n    } else res.send(data.recordset);\n  });\n};\n\nexports.delete = (req, res) => {\n  Favorite.remove(req.params.code_favorite, (err, data) => {\n    if (err) {\n      if (err.kind === \"not_found\") {\n        res.status(404).send({\n          message: `Favorite with the code ${req.params.code_favorite} wasn't found.`\n        });\n      } else {\n        res.status(500).send({\n          message: \"Error when trying to update favorite with the following code: \" + req.params.code_favorite\n        });\n      }\n    } else {\n      res.send({\n        message: `Favorite has been deleted succesfully!`\n      });\n    }\n  });\n};\n\nexports.findByUser = (req, res) => {\n  Favorite.findByUser(req.params.id_user_favorite, (err, data) => {\n    if (err) {\n      if (err.kind === \"not_found\") {\n        res.status(404).send({\n          message: `Favorite with the user ${req.params.id_user_favorite} wasn't found.`\n        });\n      } else {\n        res.status(500).send({\n          message: \"Error while searching for favorite with the user \" + req.params.id_user_favorite\n        });\n      }\n    } else res.send(data.recordset);\n  });\n};"},"sourceMaps":null,"error":null,"hash":"8f41b4e6a7bde425cae71e0f808029f4","cacheData":{"env":{}}}