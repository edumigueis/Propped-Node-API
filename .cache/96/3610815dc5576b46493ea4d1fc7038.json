{"id":"app/models/Sale.model.js","dependencies":[{"name":"C:\\Users\\Rodrigo\\Documents\\GitHub\\Propped-Node-API\\package.json","includedInParent":true,"mtime":1601776173274},{"name":"./db.js","loc":{"line":1,"column":20},"parent":"C:\\Users\\Rodrigo\\Documents\\GitHub\\Propped-Node-API\\app\\models\\Sale.model.js","resolved":"C:\\Users\\Rodrigo\\Documents\\GitHub\\Propped-Node-API\\app\\models\\db.js"}],"generated":{"js":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst sql = require(\"./db.js\");\n\nconst Sale = function (sale) {\n  this.code_sale = sale.code_sale;\n  this.id_store_sale = sale.id_store_sale;\n  this.delivery_time_sale = sale.delivery_time_sale;\n  this.amount_sale = sale.amount_sale;\n  this.shipping_sale = sale.shipping_sale;\n  this.date_order = sale.date_order;\n};\n\nSale.create = (newSale, result) => {\n  sql.query(`INSERT INTO Sale_Propped VALUES('${newSale.code_sale}',${newSale.id_store_sale},'${newSale.delivery_time_sale}',${newSale.amount_sale},${newSale.shipping_sale},'${newSale.date_order}')`, (err, res) => {\n    if (err) {\n      result(err, null);\n      return;\n    }\n\n    result(null, _objectSpread({}, newSale));\n  });\n};\n\nSale.findByCode = (code, result) => {\n  sql.query(`SELECT * FROM Sale_Propped WHERE code_sale = '${code}'`, (err, res) => {\n    if (err) {\n      result(err, null);\n      return;\n    }\n\n    if (res.length > 0) {\n      result(null, res);\n      return;\n    }\n\n    result({\n      kind: \"not_found\"\n    }, null);\n    return -1;\n  });\n};\n\nSale.getAll = result => {\n  sql.query(\"SELECT * FROM Sale_Propped\", (err, res) => {\n    if (err) {\n      result(null, err);\n      return;\n    }\n\n    result(null, res);\n  });\n};\n\nSale.updateByCode = (code, sale, result) => {\n  sale.code_sale = code;\n  sql.query(`UPDATE Sale_Propped SET id_store_sale = ${sale.id_store_sale}, delivery_time_sale = '${sale.delivery_time_sale}', amount_sale = ${sale.amount_sale}, shipping_sale= ${sale.shipping_sale}, date_order= '${sale.date_order}'  WHERE code_sale = '${code}'`, (err, res) => {\n    if (err) {\n      result(null, err);\n      return;\n    }\n\n    if (res.affectedRows == 0) {\n      result({\n        kind: \"not_found\"\n      }, null);\n      return;\n    }\n\n    result(null, _objectSpread({\n      code_sale: code\n    }, sale));\n  });\n};\n\nSale.remove = (code, result) => {\n  sql.query(\"DELETE FROM Sale_Propped WHERE code_sale = '\" + code + \"'\", (err, res) => {\n    if (err) {\n      result(null, err);\n      return;\n    }\n\n    if (res.affectedRows == 0) {\n      result({\n        kind: \"not_found\"\n      }, null);\n      return;\n    }\n\n    result(null, res);\n  });\n};\n\nmodule.exports = Sale;"},"sourceMaps":null,"error":null,"hash":"912f740a2b700f5ac2d86fe042219ded","cacheData":{"env":{}}}