{"id":"app/controllers/Products.controller.js","dependencies":[{"name":"C:\\Users\\Rodrigo\\Documents\\GitHub\\Propped-Node-API\\package.json","includedInParent":true,"mtime":1601776173274},{"name":"../data/Hasher.js","loc":{"line":1,"column":23},"parent":"C:\\Users\\Rodrigo\\Documents\\GitHub\\Propped-Node-API\\app\\controllers\\Products.controller.js","resolved":"C:\\Users\\Rodrigo\\Documents\\GitHub\\Propped-Node-API\\app\\data\\Hasher.js"},{"name":"../models/Product.model.js","loc":{"line":3,"column":24},"parent":"C:\\Users\\Rodrigo\\Documents\\GitHub\\Propped-Node-API\\app\\controllers\\Products.controller.js","resolved":"C:\\Users\\Rodrigo\\Documents\\GitHub\\Propped-Node-API\\app\\models\\Product.model.js"}],"generated":{"js":"const Hasher = require(\"../data/Hasher.js\");\n\nconst Product = require(\"../models/Product.model.js\");\n\nexports.create = (req, res) => {\n  if (!req.body) {\n    res.status(400).send({\n      message: \"Empty params\"\n    });\n  }\n\n  const product = new Product({\n    code_product: req.body.code_product,\n    id_store_product: req.body.id_store_product,\n    id_category_product: req.body.id_category_product,\n    id_subcategory_product: req.body.id_subcategory_product,\n    name_product: req.body.name_product,\n    description_product: req.body.description_product,\n    weight_product: req.body.weight_product,\n    price_product: req.body.price_product,\n    stock_product: req.body.stock_product\n  });\n  Product.create(product, (err, data) => {\n    do product.code_product = Hasher.generateCode(); while (Product.findByCode(product.code_product, (err, data) => {}) == -1);\n\n    if (err) res.status(500).send({\n      message: err.message || \"Error while trying to create product.\"\n    });else res.send(data.recordset);\n  });\n};\n\nexports.findAll = (req, res) => {\n  Product.getAll((err, data) => {\n    if (err) res.status(500).send({\n      message: err.message || \"Error while searching for products.\"\n    });else res.send(data.recordset);\n  });\n};\n\nexports.findOne = (req, res) => {\n  Product.findByCode(req.params.code_product, (err, data) => {\n    if (err) {\n      if (err.kind === \"not_found\") {\n        res.status(404).send({\n          message: `Product with the code ${req.params.code_product} wasn't found.`\n        });\n      } else {\n        res.status(500).send({\n          message: \"Error while searching for product with the code \" + req.params.code_product\n        });\n      }\n    } else res.send(data.recordset);\n  });\n};\n\nexports.update = (req, res) => {\n  if (!req.body) {\n    res.status(400).send({\n      message: \"Body of request can not be empty.\"\n    });\n  }\n\n  Product.updateByCode(req.params.code_product, new Product(req.body), (err, data) => {\n    if (err) {\n      if (err.kind === \"not_found\") {\n        res.status(404).send({\n          message: `Product with the code ${req.params.code_product} wasn't found.`\n        });\n      } else {\n        res.status(500).send({\n          message: \"Error when trying to update product with the following code: \" + req.params.code_product\n        });\n      }\n    } else res.send(data.recordset);\n  });\n};\n\nexports.delete = (req, res) => {\n  Product.remove(req.params.code_product, (err, data) => {\n    if (err) {\n      if (err.kind === \"not_found\") {\n        res.status(404).send({\n          message: `Product with the code ${req.params.code_product} wasn't found.`\n        });\n      } else {\n        res.status(500).send({\n          message: \"Error when trying to update product with the following code: \" + req.params.code_product\n        });\n      }\n    } else {\n      res.send({\n        message: `Product has been deleted succesfully!`\n      });\n    }\n  });\n};\n\nexports.findByName = (req, res) => {\n  Product.findByName(req.params.name_product, (err, data) => {\n    if (err) {\n      if (err.kind === \"not_found\") {\n        res.status(404).send({\n          message: `Product with the name ${req.params.name_product} wasn't found.`\n        });\n      } else {\n        res.status(500).send({\n          message: \"Error while searching for product with the name \" + req.params.name_product\n        });\n      }\n    } else res.send(data.recordset);\n  });\n};\n\nexports.findByStore = (req, res) => {\n  Product.findByStore(req.params.id_store_product, (err, data) => {\n    if (err) {\n      if (err.kind === \"not_found\") {\n        res.status(404).send({\n          message: `Product with the store ${req.params.id_store_product} wasn't found.`\n        });\n      } else {\n        res.status(500).send({\n          message: \"Error while searching for product with the store \" + req.params.id_store_product\n        });\n      }\n    } else res.send(data.recordset);\n  });\n};"},"sourceMaps":null,"error":null,"hash":"c2c7dbe1a496f1328345d553f75e102c","cacheData":{"env":{}}}