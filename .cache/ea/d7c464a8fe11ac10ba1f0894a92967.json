{"id":"app/models/User.model.js","dependencies":[{"name":"C:\\Users\\Rodrigo\\Documents\\GitHub\\Propped-Node-API\\package.json","includedInParent":true,"mtime":1601776173274},{"name":"../data/Hasher.js","loc":{"line":1,"column":23},"parent":"C:\\Users\\Rodrigo\\Documents\\GitHub\\Propped-Node-API\\app\\models\\User.model.js","resolved":"C:\\Users\\Rodrigo\\Documents\\GitHub\\Propped-Node-API\\app\\data\\Hasher.js"},{"name":"./db.js","loc":{"line":3,"column":20},"parent":"C:\\Users\\Rodrigo\\Documents\\GitHub\\Propped-Node-API\\app\\models\\User.model.js","resolved":"C:\\Users\\Rodrigo\\Documents\\GitHub\\Propped-Node-API\\app\\models\\db.js"}],"generated":{"js":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst Hasher = require(\"../data/Hasher.js\");\n\nconst sql = require(\"./db.js\");\n\nconst User = function (user) {\n  this.code_user = user.code_user;\n  this.name_user = user.name_user;\n  this.email_user = user.email_user;\n  this.pass_user = user.pass_user;\n  this.gender_user = user.gender_user;\n  this.birth_date_user = user.birth_date_user;\n  this.registry_user = user.registry_user;\n  this.phone_user = user.phone_user;\n  this.image_user = user.image_user;\n  this.preference_user = user.preference_user;\n};\n\nUser.create = (newUser, result) => {\n  sql.query(`INSERT INTO User_Propped VALUES('${newUser.code_user}','${newUser.name_user}','${newUser.email_user}','${newUser.pass_user}','${newUser.gender_user}','${newUser.birth_date_user}','${newUser.registry_user}','${newUser.phone_user}', CAST('${newUser.image_user}' as varbinary(max)), '${newUser.preference_user}')`, (err, res) => {\n    if (err) {\n      result(err, null);\n      return;\n    }\n\n    result(null, _objectSpread({}, newUser));\n  });\n};\n\nUser.findByCode = (code, result) => {\n  sql.query(`SELECT * FROM User_Propped WHERE code_user = '${code}'`, (err, res) => {\n    if (err) {\n      result(err, null);\n      return;\n    }\n\n    if (res.length > 0) {\n      result(null, res);\n      return;\n    }\n\n    result({\n      kind: \"not_found\"\n    }, null);\n    return -1;\n  });\n};\n\nUser.getAll = result => {\n  sql.query(\"SELECT * FROM User_Propped\", (err, res) => {\n    if (err) {\n      result(null, err);\n      return;\n    }\n\n    result(null, res);\n  });\n};\n\nUser.updateByCode = (code, user, result) => {\n  user.code_user = code;\n  sql.query(`UPDATE User_Propped SET name_user = '${user.name_user}', email_user = '${user.email_user}', pass_user = '${user.pass_user}', gender_user= '${user.gender_user}', birth_date_user= '${user.birth_date_user}', registry_user= '${user.registry_user}', phone_user= '${user.phone_user}', image_user= CAST('${user.image_user}' as varbinary(max)), preference_user = '${user.preference_user}'  WHERE code_user = '${code}'`, (err, res) => {\n    if (err) {\n      console.log(\"error: \", err);\n      result(null, err);\n      return;\n    }\n\n    if (res.affectedRows == 0) {\n      result({\n        kind: \"not_found\"\n      }, null);\n      return;\n    }\n\n    result(null, _objectSpread({\n      code_user: code\n    }, user));\n  });\n};\n\nUser.remove = (code, result) => {\n  sql.query(\"DELETE FROM User_Propped WHERE code_user = '\" + code + \"'\", (err, res) => {\n    if (err) {\n      result(null, err);\n      return;\n    }\n\n    if (res.affectedRows == 0) {\n      result({\n        kind: \"not_found\"\n      }, null);\n      return;\n    }\n\n    result(null, res);\n  });\n};\n\nUser.findByLoginData = (email, senha, result) => {\n  sql.query(`SELECT * FROM User_Propped WHERE email_user = '${email}'`, (err, res) => {\n    if (err) {\n      result(err, null);\n      return;\n    }\n\n    if (res.length > 0) {\n      Hasher.comparePassword(senha, res.pass_user, function (res) {\n        if (res) {\n          result(null, res);\n          return;\n        } else {\n          result({\n            kind: \"wrong_password\"\n          }, null);\n          return;\n        }\n      });\n    }\n\n    result({\n      kind: \"not_found\"\n    }, null);\n  });\n};\n\nmodule.exports = User;"},"sourceMaps":null,"error":null,"hash":"f1f6abd6f2d1f1f7c7577db7151b48f1","cacheData":{"env":{}}}