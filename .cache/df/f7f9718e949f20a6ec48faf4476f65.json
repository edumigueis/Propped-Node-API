{"id":"app/controllers/Users.controller.js","dependencies":[{"name":"C:\\Users\\Rodrigo\\Documents\\GitHub\\Propped-Node-API\\package.json","includedInParent":true,"mtime":1601776173274},{"name":"../data/Hasher.js","loc":{"line":1,"column":23},"parent":"C:\\Users\\Rodrigo\\Documents\\GitHub\\Propped-Node-API\\app\\controllers\\Users.controller.js","resolved":"C:\\Users\\Rodrigo\\Documents\\GitHub\\Propped-Node-API\\app\\data\\Hasher.js"},{"name":"../models/User.model.js","loc":{"line":3,"column":21},"parent":"C:\\Users\\Rodrigo\\Documents\\GitHub\\Propped-Node-API\\app\\controllers\\Users.controller.js","resolved":"C:\\Users\\Rodrigo\\Documents\\GitHub\\Propped-Node-API\\app\\models\\User.model.js"}],"generated":{"js":"const Hasher = require(\"../data/Hasher.js\");\n\nconst User = require(\"../models/User.model.js\");\n\nexports.create = (req, res) => {\n  if (!req.body) {\n    res.status(400).send({\n      message: \"Empty params\"\n    });\n  }\n\n  const user = new User({\n    code_user: req.body.code_user,\n    name_user: req.body.name_user,\n    email_user: req.body.email_user,\n    pass_user: req.body.pass_user,\n    gender_user: req.body.gender_user,\n    birth_date_user: req.body.birth_date_user,\n    registry_user: req.body.registry_user,\n    phone_user: req.body.phone_user,\n    image_user: req.body.image_user,\n    preference_user: req.body.preference_user\n  });\n  User.create(user, (err, data) => {\n    do user.code_user = Hasher.generateCode(); while (User.findByCode(user.code_user, (err, data) => {}) == -1);\n\n    if (err) res.status(500).send({\n      message: err.message || \"Error while trying to create user.\"\n    });else res.send(data.recordset);\n  });\n};\n\nexports.findAll = (req, res) => {\n  User.getAll((err, data) => {\n    if (err) res.status(500).send({\n      message: err.message || \"Error while searching for users.\"\n    });else res.send(data.recordset);\n  });\n};\n\nexports.findOne = (req, res) => {\n  User.findByCode(req.params.code_user, (err, data) => {\n    if (err) {\n      if (err.kind === \"not_found\") {\n        res.status(404).send({\n          message: `User with the code ${req.params.code_user} wasn't found.`\n        });\n      } else {\n        res.status(500).send({\n          message: \"Error while searching for user with the code \" + req.params.code_user\n        });\n      }\n    } else res.send(data.recordset);\n  });\n};\n\nexports.update = (req, res) => {\n  if (!req.body) {\n    res.status(400).send({\n      message: \"Body of request can not be empty.\"\n    });\n  }\n\n  User.updateByCode(req.params.code_user, new User(req.body), (err, data) => {\n    if (err) {\n      if (err.kind === \"not_found\") {\n        res.status(404).send({\n          message: `User with the code ${req.params.code_user} wasn't found.`\n        });\n      } else {\n        res.status(500).send({\n          message: \"Error when trying to update user with the following code: \" + req.params.code_user\n        });\n      }\n    } else res.send(data.recordset);\n  });\n};\n\nexports.delete = (req, res) => {\n  User.remove(req.params.code_user, (err, data) => {\n    if (err) {\n      if (err.kind === \"not_found\") {\n        res.status(404).send({\n          message: `User with the code ${req.params.code_user} wasn't found.`\n        });\n      } else {\n        res.status(500).send({\n          message: \"Error when trying to update user with the following code: \" + req.params.code_user\n        });\n      }\n    } else {\n      res.send({\n        message: `User has been deleted succesfully!`\n      });\n    }\n  });\n};\n\nexports.login = (req, res) => {\n  User.findByLoginData(req.params.email_user, req.params.pass_user, (err, data) => {\n    if (err) {\n      if (err.kind === \"not_found\") {\n        res.status(404).send({\n          message: `User with the email ${req.params.email_user} wasn't found.`\n        });\n      } else if (err.kind === \"wrong_password\") {\n        res.status(403).send({\n          message: `User with the email ${req.params.email_user} doesnÂ´t have this password.`\n        });\n      } else {\n        res.status(500).send({\n          message: \"Error when trying to verify user with this email and password.\"\n        });\n      }\n    } else {\n      res.send({\n        message: `All data is correct! User will be logged in.`\n      });\n    }\n  });\n};"},"sourceMaps":null,"error":null,"hash":"afb29724c9d0f7e62aae956319444896","cacheData":{"env":{}}}