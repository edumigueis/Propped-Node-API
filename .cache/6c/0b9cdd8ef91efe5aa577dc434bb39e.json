{"id":"app/models/Favorite.model.js","dependencies":[{"name":"C:\\Users\\Rodrigo\\Documents\\GitHub\\Propped-Node-API\\package.json","includedInParent":true,"mtime":1601776173274},{"name":"./db.js","loc":{"line":1,"column":20},"parent":"C:\\Users\\Rodrigo\\Documents\\GitHub\\Propped-Node-API\\app\\models\\Favorite.model.js","resolved":"C:\\Users\\Rodrigo\\Documents\\GitHub\\Propped-Node-API\\app\\models\\db.js"}],"generated":{"js":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst sql = require(\"./db.js\");\n\nconst Favorite = function (favorite) {\n  this.code_favorite = favorite.code_favorite;\n  this.id_user_favorite = favorite.id_user_favorite;\n  this.id_product_favorite = favorite.id_product_favorite;\n};\n\nFavorite.create = (newFavorite, result) => {\n  sql.query(`INSERT INTO Favorite_Propped VALUES('${newFavorite.code_favorite}',${newFavorite.id_user_favorite},${newFavorite.id_product_favorite})`, (err, res) => {\n    if (err) {\n      result(err, null);\n      return;\n    }\n\n    result(null, _objectSpread({}, newFavorite));\n  });\n};\n\nFavorite.findByCode = (code, result) => {\n  sql.query(`SELECT * FROM Favorite_Propped WHERE code_favorite = '${code}'`, (err, res) => {\n    if (err) {\n      result(err, null);\n      return;\n    }\n\n    if (res.length > 0) {\n      result(null, res);\n      return;\n    }\n\n    result({\n      kind: \"not_found\"\n    }, null);\n    return -1;\n  });\n};\n\nFavorite.getAll = result => {\n  sql.query(\"SELECT * FROM Favorite_Propped\", (err, res) => {\n    if (err) {\n      result(null, err);\n      return;\n    }\n\n    result(null, res);\n  });\n};\n\nFavorite.updateByCode = (code, favorite, result) => {\n  favorite.code_favorite = code;\n  sql.query(`UPDATE Favorite_Propped SET id_user_favorite = ${favorite.id_user_favorite}, id_product_favorite = ${favorite.id_product_favorite} WHERE code_favorite = '${code}'`, (err, res) => {\n    if (err) {\n      result(null, err);\n      return;\n    }\n\n    if (res.affectedRows == 0) {\n      result({\n        kind: \"not_found\"\n      }, null);\n      return;\n    }\n\n    result(null, _objectSpread({\n      code_favorite: code\n    }, favorite));\n  });\n};\n\nFavorite.remove = (code, result) => {\n  sql.query(\"DELETE FROM Favorite_Propped WHERE code_favorite = '\" + code + \"'\", (err, res) => {\n    if (err) {\n      result(null, err);\n      return;\n    }\n\n    if (res.affectedRows == 0) {\n      result({\n        kind: \"not_found\"\n      }, null);\n      return;\n    }\n\n    result(null, res);\n  });\n};\n\nFavorite.findByUser = (id, result) => {\n  sql.query(`SELECT * FROM Favorite_Propped WHERE id_user_favorite = ${id}`, (err, res) => {\n    if (err) {\n      result(err, null);\n      return;\n    }\n\n    if (res.length > 0) {\n      result(null, res);\n      return;\n    }\n\n    result({\n      kind: \"not_found\"\n    }, null);\n    return -1;\n  });\n};\n\nmodule.exports = Favorite;"},"sourceMaps":null,"error":null,"hash":"749fcae1c53c8252edbcb7f3274b60a5","cacheData":{"env":{}}}