{"id":"app/models/Product.model.js","dependencies":[{"name":"C:\\Users\\Rodrigo\\Documents\\GitHub\\Propped-Node-API\\package.json","includedInParent":true,"mtime":1601776173274},{"name":"./db.js","loc":{"line":1,"column":20},"parent":"C:\\Users\\Rodrigo\\Documents\\GitHub\\Propped-Node-API\\app\\models\\Product.model.js","resolved":"C:\\Users\\Rodrigo\\Documents\\GitHub\\Propped-Node-API\\app\\models\\db.js"}],"generated":{"js":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst sql = require(\"./db.js\");\n\nconst Product = function (product) {\n  this.code_product = product.code_product;\n  this.id_store_product = product.id_store_product;\n  this.id_category_product = product.id_category_product;\n  this.id_subcategory_product = product.id_subcategory_product;\n  this.name_product = product.name_product;\n  this.description_product = product.description_product;\n  this.weight_product = product.weight_product;\n  this.price_product = product.price_product;\n  this.stock_product = product.stock_product;\n};\n\nProduct.create = (newProduct, result) => {\n  sql.query(`INSERT INTO Product_Propped VALUES('${newProduct.code_product}',${newProduct.id_store_product},${newProduct.id_category_product},${newProduct.id_subcategory_product},'${newProduct.name_product}','${newProduct.description_product}',${newProduct.weight_product},${newProduct.price_product}, ${newProduct.stock_product})`, (err, res) => {\n    if (err) {\n      result(err, null);\n      return;\n    }\n\n    result(null, _objectSpread({}, newProduct));\n  });\n};\n\nProduct.findByCode = (code, result) => {\n  sql.query(`SELECT * FROM Product_Propped WHERE code_product = '${code}'`, (err, res) => {\n    if (err) {\n      result(err, null);\n      return;\n    }\n\n    if (res.length > 0) {\n      result(null, res);\n      return;\n    }\n\n    result({\n      kind: \"not_found\"\n    }, null);\n    return -1;\n  });\n};\n\nProduct.getAll = result => {\n  sql.query(\"SELECT * FROM Product_Propped\", (err, res) => {\n    if (err) {\n      result(null, err);\n      return;\n    }\n\n    result(null, res);\n  });\n};\n\nProduct.updateByCode = (code, product, result) => {\n  product.code_product = code;\n  sql.query(`UPDATE Product_Propped SET id_store_product = ${product.id_store_product}, id_category_product = ${product.id_category_product}, id_subcategory_product = ${product.id_subcategory_product}, name_product= '${product.name_product}', description_product= '${product.description_product}', weight_product= ${product.weight_product}, price_product= ${product.price_product}, stock_product = '${product.stock_product}'  WHERE code_product = '${code}'`, (err, res) => {\n    if (err) {\n      console.log(\"error: \", err);\n      result(null, err);\n      return;\n    }\n\n    if (res.affectedRows == 0) {\n      result({\n        kind: \"not_found\"\n      }, null);\n      return;\n    }\n\n    result(null, _objectSpread({\n      code_product: code\n    }, product));\n  });\n};\n\nProduct.remove = (code, result) => {\n  sql.query(\"DELETE FROM Product_Propped WHERE code_product = '\" + code + \"'\", (err, res) => {\n    if (err) {\n      result(null, err);\n      return;\n    }\n\n    if (res.affectedRows == 0) {\n      result({\n        kind: \"not_found\"\n      }, null);\n      return;\n    }\n\n    result(null, res);\n  });\n};\n\nProduct.findByName = (name, result) => {\n  sql.query(`SELECT * FROM Product_Propped WHERE code_product like '%${name}%'`, (err, res) => {\n    if (err) {\n      result(err, null);\n      return;\n    }\n\n    if (res.length > 0) {\n      result(null, res);\n      return;\n    }\n\n    result({\n      kind: \"not_found\"\n    }, null);\n    return -1;\n  });\n};\n\nProduct.findByStore = (id, result) => {\n  sql.query(`SELECT * FROM Product_Propped WHERE id_store_product = ${id}`, (err, res) => {\n    if (err) {\n      result(err, null);\n      return;\n    }\n\n    if (res.length > 0) {\n      result(null, res);\n      return;\n    }\n\n    result({\n      kind: \"not_found\"\n    }, null);\n    return -1;\n  });\n};\n\nmodule.exports = Product;"},"sourceMaps":null,"error":null,"hash":"c77c74ba22777639d06a53e0b5af8f89","cacheData":{"env":{}}}