{"id":"app/controllers/Orders.controller.js","dependencies":[{"name":"C:\\Users\\Rodrigo\\Documents\\GitHub\\Propped-Node-API\\package.json","includedInParent":true,"mtime":1601776173274},{"name":"../data/Hasher.js","loc":{"line":1,"column":23},"parent":"C:\\Users\\Rodrigo\\Documents\\GitHub\\Propped-Node-API\\app\\controllers\\Orders.controller.js","resolved":"C:\\Users\\Rodrigo\\Documents\\GitHub\\Propped-Node-API\\app\\data\\Hasher.js"},{"name":"../models/Order.model.js","loc":{"line":3,"column":22},"parent":"C:\\Users\\Rodrigo\\Documents\\GitHub\\Propped-Node-API\\app\\controllers\\Orders.controller.js","resolved":"C:\\Users\\Rodrigo\\Documents\\GitHub\\Propped-Node-API\\app\\models\\Order.model.js"}],"generated":{"js":"const Hasher = require(\"../data/Hasher.js\");\n\nconst Order = require(\"../models/Order.model.js\");\n\nexports.create = (req, res) => {\n  if (!req.body) {\n    res.status(400).send({\n      message: \"Empty params\"\n    });\n  }\n\n  const order = new Order({\n    code_order: req.body.code_order,\n    id_user_order: req.body.id_user_order,\n    id_form_of_payment_order: req.body.id_form_of_payment_order,\n    date_order: req.body.date_order,\n    total_order: req.body.total_order,\n    total_of_shipping_order: req.body.total_of_shipping_order\n  });\n  Order.create(order, (err, data) => {\n    do order.code_order = Hasher.generateCode(); while (Order.findByCode(order.code_order, (err, data) => {}) == -1);\n\n    if (err) res.status(500).send({\n      message: err.message || \"Error while trying to create order.\"\n    });else res.send(data.recordset);\n  });\n};\n\nexports.findAll = (req, res) => {\n  Order.getAll((err, data) => {\n    if (err) res.status(500).send({\n      message: err.message || \"Error while searching for orders.\"\n    });else res.send(data.recordset);\n  });\n};\n\nexports.findOne = (req, res) => {\n  Order.findByCode(req.params.code_order, (err, data) => {\n    if (err) {\n      if (err.kind === \"not_found\") {\n        res.status(404).send({\n          message: `Order with the code ${req.params.code_order} wasn't found.`\n        });\n      } else {\n        res.status(500).send({\n          message: \"Error while searching for order with the code \" + req.params.code_order\n        });\n      }\n    } else res.send(data.recordset);\n  });\n};\n\nexports.update = (req, res) => {\n  if (!req.body) {\n    res.status(400).send({\n      message: \"Body of request can not be empty.\"\n    });\n  }\n\n  Order.updateByCode(req.params.code_order, new Order(req.body), (err, data) => {\n    if (err) {\n      if (err.kind === \"not_found\") {\n        res.status(404).send({\n          message: `Order with the code ${req.params.code_order} wasn't found.`\n        });\n      } else {\n        res.status(500).send({\n          message: \"Error when trying to update order with the following code: \" + req.params.code_order\n        });\n      }\n    } else res.send(data.recordset);\n  });\n};\n\nexports.delete = (req, res) => {\n  Order.remove(req.params.code_order, (err, data) => {\n    if (err) {\n      if (err.kind === \"not_found\") {\n        res.status(404).send({\n          message: `Order with the code ${req.params.code_order} wasn't found.`\n        });\n      } else {\n        res.status(500).send({\n          message: \"Error when trying to update order with the following code: \" + req.params.code_order\n        });\n      }\n    } else {\n      res.send({\n        message: `Order has been deleted succesfully!`\n      });\n    }\n  });\n};"},"sourceMaps":null,"error":null,"hash":"65ecc9b6dc152a35737bdc83c37d641f","cacheData":{"env":{}}}