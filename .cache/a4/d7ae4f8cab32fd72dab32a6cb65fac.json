{"id":"app/controllers/Sales.controller.js","dependencies":[{"name":"C:\\Users\\Rodrigo\\Documents\\GitHub\\Propped-Node-API\\package.json","includedInParent":true,"mtime":1601776173274},{"name":"../data/Hasher.js","loc":{"line":1,"column":23},"parent":"C:\\Users\\Rodrigo\\Documents\\GitHub\\Propped-Node-API\\app\\controllers\\Sales.controller.js","resolved":"C:\\Users\\Rodrigo\\Documents\\GitHub\\Propped-Node-API\\app\\data\\Hasher.js"},{"name":"../models/Sale.model.js","loc":{"line":3,"column":21},"parent":"C:\\Users\\Rodrigo\\Documents\\GitHub\\Propped-Node-API\\app\\controllers\\Sales.controller.js","resolved":"C:\\Users\\Rodrigo\\Documents\\GitHub\\Propped-Node-API\\app\\models\\Sale.model.js"}],"generated":{"js":"const Hasher = require(\"../data/Hasher.js\");\n\nconst Sale = require(\"../models/Sale.model.js\");\n\nexports.create = (req, res) => {\n  if (!req.body) {\n    res.status(400).send({\n      message: \"Empty params\"\n    });\n  }\n\n  const sale = new Sale({\n    code_sale: req.body.code_sale,\n    id_store_sale: req.body.id_store_sale,\n    delivery_time_sale: req.body.delivery_time_sale,\n    amount_sale: req.body.amount_sale,\n    shipping_sale: req.body.shipping_sale,\n    date_order: req.body.date_order\n  });\n  Sale.create(sale, (err, data) => {\n    do sale.code_sale = Hasher.generateCode(); while (Sale.findByCode(sale.code_sale, (err, data) => {}) == -1);\n\n    if (err) res.status(500).send({\n      message: err.message || \"Error while trying to create sale.\"\n    });else res.send(data.recordset);\n  });\n};\n\nexports.findAll = (req, res) => {\n  Sale.getAll((err, data) => {\n    if (err) res.status(500).send({\n      message: err.message || \"Error while searching for sales.\"\n    });else res.send(data.recordset);\n  });\n};\n\nexports.findOne = (req, res) => {\n  Sale.findByCode(req.params.code_sale, (err, data) => {\n    if (err) {\n      if (err.kind === \"not_found\") {\n        res.status(404).send({\n          message: `Sale with the code ${req.params.code_sale} wasn't found.`\n        });\n      } else {\n        res.status(500).send({\n          message: \"Error while searching for sale with the code \" + req.params.code_sale\n        });\n      }\n    } else res.send(data.recordset);\n  });\n};\n\nexports.update = (req, res) => {\n  if (!req.body) {\n    res.status(400).send({\n      message: \"Body of request can not be empty.\"\n    });\n  }\n\n  Sale.updateByCode(req.params.code_sale, new Sale(req.body), (err, data) => {\n    if (err) {\n      if (err.kind === \"not_found\") {\n        res.status(404).send({\n          message: `Sale with the code ${req.params.code_sale} wasn't found.`\n        });\n      } else {\n        res.status(500).send({\n          message: \"Error when trying to update sale with the following code: \" + req.params.code_sale\n        });\n      }\n    } else res.send(data.recordset);\n  });\n};\n\nexports.delete = (req, res) => {\n  Sale.remove(req.params.code_sale, (err, data) => {\n    if (err) {\n      if (err.kind === \"not_found\") {\n        res.status(404).send({\n          message: `Sale with the code ${req.params.code_sale} wasn't found.`\n        });\n      } else {\n        res.status(500).send({\n          message: \"Error when trying to update sale with the following code: \" + req.params.code_sale\n        });\n      }\n    } else {\n      res.send({\n        message: `Sale has been deleted succesfully!`\n      });\n    }\n  });\n};"},"sourceMaps":null,"error":null,"hash":"fce4c627c606686b261c8f71e5b3c03f","cacheData":{"env":{}}}