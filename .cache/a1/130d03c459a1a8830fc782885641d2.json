{"id":"app/controllers/Stores.controller.js","dependencies":[{"name":"C:\\Users\\Rodrigo\\Documents\\GitHub\\Propped-Node-API\\package.json","includedInParent":true,"mtime":1601776173274},{"name":"../data/Hasher.js","loc":{"line":1,"column":23},"parent":"C:\\Users\\Rodrigo\\Documents\\GitHub\\Propped-Node-API\\app\\controllers\\Stores.controller.js","resolved":"C:\\Users\\Rodrigo\\Documents\\GitHub\\Propped-Node-API\\app\\data\\Hasher.js"},{"name":"../models/Store.model.js","loc":{"line":3,"column":22},"parent":"C:\\Users\\Rodrigo\\Documents\\GitHub\\Propped-Node-API\\app\\controllers\\Stores.controller.js","resolved":"C:\\Users\\Rodrigo\\Documents\\GitHub\\Propped-Node-API\\app\\models\\Store.model.js"}],"generated":{"js":"const Hasher = require(\"../data/Hasher.js\");\n\nconst Store = require(\"../models/Store.model.js\");\n\nexports.create = (req, res) => {\n  if (!req.body) {\n    res.status(400).send({\n      message: \"Empty params\"\n    });\n  }\n\n  const store = new Store({\n    code_store: req.body.code_store,\n    name_store: req.body.name_store,\n    registry_store: req.body.registry_store,\n    website_store: req.body.website_store,\n    phone_store: req.body.phone_store,\n    postal_code_store: req.body.postal_code_store,\n    address_store: req.body.address_store,\n    city_store: req.body.city_store,\n    state_store: req.body.state_store,\n    country_store: req.body.country_store,\n    image_store: req.body.image_store\n  });\n  Store.create(store, (err, data) => {\n    do store.code_store = Hasher.generateCode(); while (Store.findByCode(store.code_store, (err, data) => {}) == -1);\n\n    if (err) res.status(500).send({\n      message: err.message || \"Error while trying to create store.\"\n    });else res.send(data.recordset);\n  });\n};\n\nexports.findAll = (req, res) => {\n  Store.getAll((err, data) => {\n    if (err) res.status(500).send({\n      message: err.message || \"Error while searching for stores.\"\n    });else res.send(data.recordset);\n  });\n};\n\nexports.findOne = (req, res) => {\n  Store.findByCode(req.params.code_store, (err, data) => {\n    if (err) {\n      if (err.kind === \"not_found\") {\n        res.status(404).send({\n          message: `Store with the code ${req.params.code_store} wasn't found.`\n        });\n      } else {\n        res.status(500).send({\n          message: \"Error while searching for store with the code \" + req.params.code_store\n        });\n      }\n    } else res.send(data.recordset);\n  });\n};\n\nexports.update = (req, res) => {\n  if (!req.body) {\n    res.status(400).send({\n      message: \"Body of request can not be empty.\"\n    });\n  }\n\n  Store.updateByCode(req.params.code_store, new Store(req.body), (err, data) => {\n    if (err) {\n      if (err.kind === \"not_found\") {\n        res.status(404).send({\n          message: `Store with the code ${req.params.code_store} wasn't found.`\n        });\n      } else {\n        res.status(500).send({\n          message: \"Error when trying to update store with the following code: \" + req.params.code_store\n        });\n      }\n    } else res.send(data.recordset);\n  });\n};\n\nexports.delete = (req, res) => {\n  Store.remove(req.params.code_store, (err, data) => {\n    if (err) {\n      if (err.kind === \"not_found\") {\n        res.status(404).send({\n          message: `Store with the code ${req.params.code_store} wasn't found.`\n        });\n      } else {\n        res.status(500).send({\n          message: \"Error when trying to update store with the following code: \" + req.params.code_store\n        });\n      }\n    } else {\n      res.send({\n        message: `Store has been deleted succesfully!`\n      });\n    }\n  });\n};"},"sourceMaps":null,"error":null,"hash":"8981a6ae2d40e195404e6cdb0b1ff2a4","cacheData":{"env":{}}}